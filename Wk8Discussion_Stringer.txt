Discussion Questions

- Runtime

1) The workload of a function that takes a list of integers and returns a new list of even integers is the length of the list of integers (and ultimately, the number of times the list needs to iterate through. As this is returning a list of even numbers for an input list of integers, each number must be examined.)

2) Ascending runtime as n approaches infinity:
O(1), O(log n), O(n), O(n log n), O(n^2), O(2^n)


- Stacks & Queues

1) 
a) Process of loading and unloading pallets onto a flatbed truck: stack
b) Putting bottle caps on bottles of ber as they roll down an assembly line: queue
c) Calculating the solution to the mathematical expression: stack

2) Two examples of a queue: A line at the DMV, the order in which a person enters and receives a number is the order in which they are served (first in, first out)

3) Two examples of a stack: 

- Linked Lists
1) In the given linked list, the nodes are the node objects "apple", "berry" and "cherry", each containing both a data and a next attribute. The data for each node is the string value of the data attribute ('Apple', 'Berry' and 'Cherry', respectively). The next attribute functions as a pointer indicating the next node in the linked list, and is bound to the next node object in the linked list.

The head is an attribute of the linked list object, LLIST, and is bound to the first node object of the linked list, 'Apple'. There is no explicit tail attribute. Were there to be an attribute given, the appropriate node would be 'Cherry'. 

2) A singly linked list can be navigated in only one direction; pointers indicate either (and each node object in the linked list has the same type of pointer; there would not be a mix of some nodes with "next" and some with "previous" pointers).

A doubly linked list can be navigated in two directions, with pointers indicating both a "next" and a "previous" node.

3) It is faster to append to a linked list if we have the tail as an attribute because we can navigate directly to that node. Without an explicit tail attribute, we would need to create a find method for the linked list object to navigate to the node that does not point to any other node to find the end of the list. The former method has a constant runtime whereas the latter has a linear runtime as the linked list needs to iterate through every item it contains.

- Trees
1) A Breadth First Search algorithm would visit each "level" of tree (the children of the root first, followed by those nodes' children after the algorithm has visited each child of the root). Thus, the search would visit Italian, Indian, Mexican, lasagna, pizza, tikka masala and saag before reaching burrito.

2) A Depth First Search algorith would visit each child and would navigate the tree starting from the right side. It would visit Mexican and its children, Indian and its children, Italian, pizza, Sicilian, New York before Chicago.

3) A binary search tree contains nodes with only two children (one or both of which can be None); each node cannot have more than two children. The runtime for a binary search tree is log n, thus much better as workload increases. 

